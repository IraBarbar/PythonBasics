# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω
# —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
# üìå –ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á
# json —Å–ª–æ–≤–∞—Ä—è.
# üìå –î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç
# –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# üìå –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π
# —Ñ—É–Ω–∫—Ü–∏–∏.
from typing import Callable
from pathlib import Path
import json
import os
from functools import wraps
pp = Path(Path().cwd())


def decor(func: Callable):
    """C–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    _cache_dict = {}

    @wraps(func)
    def wrapper(*args):
        name = func.__name__ + '.json'

        """–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª"""
        if os.path.exists(name):
            with open(pp/name, 'r', encoding='UTF-8') as file:
                data = json.load(file)
        else:
            data = {}
        _cache_dict = data

        if args not in _cache_dict:
            _cache_dict[str(args)] = func(*args)

        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª"""
        res = json.dumps(_cache_dict, indent=2, sort_keys=True, ensure_ascii=False)
        with open(pp/name, 'w', encoding='utf-8') as f:
            print(res, end='\n', file=f)
        return _cache_dict[str(args)]

    return wrapper


@decor
def sum_nums(a: int, b: int):
    sums = a + b
    return sums


# print(sum_nums(22, 23))
# print(sum_nums(12, 33))
# print(sum_nums(12, 60))

