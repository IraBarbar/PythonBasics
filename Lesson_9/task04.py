# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π
# —Ñ—É–Ω–∫—Ü–∏–∏.

from typing import Callable
from functools import wraps

def count(num: int = 1):
    def deco(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            res_for_count = []
            result = None
            for _ in range(num):
                res_for_count.append(func(*args))
            return res_for_count
        return wrapper
    return deco


@count(2)
def sum_nums(a: int, b: int):
    sums = a + b
    return sums


print(sum_nums(22, 23))
print(sum_nums(12, 33))
print(sum_nums(12, 60))