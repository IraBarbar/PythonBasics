# –í –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ –∏ –≤–µ—Ä–Ω—É—Ç—å 10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö.
# –ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤.
# –ó–∞ –æ—Å–Ω–æ–≤—É –≤–æ–∑—å–º–∏—Ç–µ –ª—é–±—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏ –∏–ª–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫ —è–∑—ã–∫—É.

my_str = '''\
    –§—É–Ω–∫—Ü–∏—è sorted –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ª—é–±—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ
–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
üî• –í–∞–∂–Ω–æ! –§—É–Ω–∫—Ü–∏—è sorted –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–∏, –Ω–æ –∏ –¥—Ä—É–≥–∏–µ
–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: —Å—Ç—Ä–æ–∫–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –∫–æ—Ä—Ç–µ–∂–∏, —Å–ª–æ–≤–∞—Ä–∏ –∏ —Ç.–ø.. –ü—Ä–∏ —ç—Ç–æ–º
—Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫.
–ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–ª–ª–µ–∫—Ü–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
—Ñ—É–Ω–∫—Ü–∏–∏. –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç reverse=True,
—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
–í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ Timsort ‚Äî –≥–∏–±—Ä–∏–¥–Ω–∞—è
—É—Å—Ç–æ–π—á–∏–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Å–∏–º–ø—Ç–æ—Ç–∏–∫–æ–π O(n log n). –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
—Ç—Ä–∞—Ç–∏—Ç—Å—è O(n) –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\
'''
from pprint import pp
TOP = 10
lst_str = list(my_str.replace('.', '').
               replace(',', '').
               replace(':', '').
               replace('üî•', '').
               replace('‚Äî', '').
               replace('(', '').
               replace(')', '').
               replace('!', '').
               replace('?', '').
               replace('=', '').lower().split())
dict_strs = {}
for key in lst_str:
    dict_strs[key] = lst_str.count(key)

pp((sorted(dict_strs.items(), key=lambda item: item[1], reverse=True))[:TOP])


