# üìå –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# ‚óã –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
# ‚óã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è csv —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–º—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.
# 100-1000 —Å—Ç—Ä–æ–∫.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ
# —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–π —Ç—Ä–æ–π–∫–æ–π —á–∏—Å–µ–ª –∏–∑ csv —Ñ–∞–π–ª–∞.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
# —Ñ—É–Ω–∫—Ü–∏–∏ –≤ json —Ñ–∞–π–ª.
import math
import json
from typing import Callable
from pathlib import Path
import csv
import os
from functools import wraps
import random
from typing import Iterator
pp = Path(Path().cwd())


def gen_random_nums_csv():
    name = 'random_a_b_c.csv'

    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ñ–∞–π–ª:"""
    with open(pp/name, 'w', newline='', encoding='utf-8') as f_write:
        csv_write = csv.DictWriter(f_write, fieldnames=['a', 'b', 'c'], dialect='excel-tab', quoting=csv.QUOTE_NONNUMERIC)
        dict_row = {}
        for _ in range(random.randint(100, 1000)):
            dict_row['a'] = round(random.uniform(-100, 100), 2)
            dict_row['b'] = round(random.uniform(-100, 100), 2)
            dict_row['c'] = round(random.uniform(-100, 100), 2)
            csv_write.writerow(dict_row)

    """–°—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞:"""
    if os.path.exists(name):
        with open(pp/name, 'r', newline='') as f:
            csv_file: Iterator[dict] = csv.DictReader(f, fieldnames=['a', 'b', 'c'], dialect='excel-tab',
                                                      quoting=csv.QUOTE_NONNUMERIC)
            all_data = []
            for dict_row in csv_file:
                all_data.append(dict_row)
    else:
        all_data = []

    return all_data


def count(num: int = len(gen_random_nums_csv())):
    def decor(func: Callable):
        def wrapper(*args):

            """–í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º –∏–∑ csv"""
            a, b, c = args
            lst_csv = gen_random_nums_csv()
            cache_dict = {}
            res_for_count = []
            for dict_ in lst_csv:
                a = dict_['a']
                b = dict_['b']
                c = dict_['c']
                cache_dict[str('a=' + str(a) + ', b=' + str(b) + ', c=' + str(c))] = func(a, b, c)
                res_for_count.append(func(a, b, c))

            """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ"""
            res = json.dumps(cache_dict, indent=2, sort_keys=True, ensure_ascii=False)
            with open(pp/'parametr.json', 'w', encoding='utf-8') as f:
                print(res, end='\n', file=f)

            return res_for_count
        return wrapper
    return decor

@count()
def square_leveling(a: float = 1, b: float = 1, c: float = 1) -> float:
    """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è."""

    discr = b ** 2 - 4*a*c
    if discr > 0:
        x1 = (-b + math.sqrt(discr)) / (2*a)
        x2 = (-b - math.sqrt(discr)) / (2*a)
        res = (round(x1, 2), round(x2, 2))
    elif discr == 0:
        x = -b / (2*a)
        res = round(x, 2)
    else:
        res = '–ö–æ—Ä–Ω–µ–π –Ω–µ—Ç'
    return res


for i in square_leveling(2,2,3):
    print(i)


