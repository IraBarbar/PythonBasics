# üìå –í–æ–∑—å–º–∏—Ç–µ 1-3 –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
# –¥–∞–Ω–Ω—ã—Ö), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ —Ä–µ—à–∞–ª–∏. –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞, –∞
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–≤–æ–π—Å—Ç–≤–∞. –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤
# —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
class MultiplicationTable:

    def __init__(self):

        gen_multiplication_table_1 = ([(str(i) + ' * ' + str(j) + ' = ' + str(i * j) + '   \t')
                                       for i in range(2, 6)] for j in range(2, 10))

        gen_multiplication_table_2 = ([str(i) + ' * ' + str(j) + ' = ' + str(i * j) + '    \t'
                                       for i in range(6, 10)] for j in range(2, 10))

        for k in gen_multiplication_table_1:
            print(*k)

        print()

        for k in gen_multiplication_table_2:
            print(*k)


a = MultiplicationTable()


class Fib:

    def gen_fib(num: int):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏."""

        a, b = 0, 1
        for _ in range(num):
            yield a
            a, b = b, a + b


print()
print(*Fib.gen_fib(11))
